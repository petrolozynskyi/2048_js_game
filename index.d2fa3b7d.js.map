{"mappings":"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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    var resetGame = function resetGame() {\n        for(var i = 0; i < squares.length; i++)squares[i].innerHTML = 0;\n        score = 0;\n        scoreDisplay.innerHTML = score;\n        resultDisplay.innerHTML = \"Join the numbers and get to the <b>2048</b> tile!\";\n        generate();\n        generate();\n    };\n    var clearStyles = function clearStyles() {\n        for(var i = 0; i < squares.length; i++)squares[i].style.backgroundColor = \"#afa192\";\n    };\n    var handleNewGameClick = function handleNewGameClick() {\n        resetGame();\n        clearStyles();\n        addColours();\n        document.addEventListener(\"keyup\", control);\n    };\n    var createBoard = function createBoard() {\n        for(var i = 0; i < width * width; i++){\n            var square = document.createElement(\"div\");\n            square.innerHTML = \"0\";\n            gridDisplay.appendChild(square);\n            squares.push(square);\n        }\n        generate();\n        generate();\n    };\n    var generate = function generate() {\n        var emptySquares = squares.filter(function(square) {\n            return square.innerHTML === \"0\";\n        });\n        if (emptySquares.length === 0) {\n            checkForGameOver();\n            checkForWin();\n            return;\n        }\n        var randomIndex = Math.floor(Math.random() * emptySquares.length);\n        var newValue = Math.random() < 0.9 ? \"2\" : \"4\";\n        emptySquares[randomIndex].innerHTML = newValue;\n        checkForGameOver();\n    };\n    var moveRight = function moveRight() {\n        for(var i = 0; i < BOARD_SIZE * ROW_SIZE; i++)if (i % 4 === 0) {\n            var totalOne = squares[i].innerHTML;\n            var totalTwo = squares[i + 1].innerHTML;\n            var totalThree = squares[i + 2].innerHTML;\n            var totalFour = squares[i + 3].innerHTML;\n            var row = [\n                parseInt(totalOne),\n                parseInt(totalTwo),\n                parseInt(totalThree),\n                parseInt(totalFour)\n            ];\n            var filteredRow = row.filter(function(num) {\n                return num;\n            });\n            var missing = ROW_SIZE - filteredRow.length;\n            var zeros = Array(missing).fill(0);\n            var newRow = zeros.concat(filteredRow);\n            squares[i].innerHTML = newRow[0];\n            squares[i + 1].innerHTML = newRow[1];\n            squares[i + 2].innerHTML = newRow[2];\n            squares[i + 3].innerHTML = newRow[3];\n        }\n    };\n    var moveLeft = function moveLeft() {\n        for(var i = 0; i < BOARD_SIZE * ROW_SIZE; i++)if (i % ROW_SIZE === 0) {\n            var totalOne = squares[i].innerHTML;\n            var totalTwo = squares[i + 1].innerHTML;\n            var totalThree = squares[i + 2].innerHTML;\n            var totalFour = squares[i + 3].innerHTML;\n            var row = [\n                parseInt(totalOne),\n                parseInt(totalTwo),\n                parseInt(totalThree),\n                parseInt(totalFour)\n            ];\n            var filteredRow = row.filter(function(num) {\n                return num;\n            });\n            var missing = ROW_SIZE - filteredRow.length;\n            var zeros = Array(missing).fill(0);\n            var newRow = filteredRow.concat(zeros);\n            squares[i].innerHTML = newRow[0];\n            squares[i + 1].innerHTML = newRow[1];\n            squares[i + 2].innerHTML = newRow[2];\n            squares[i + 3].innerHTML = newRow[3];\n        }\n    };\n    var moveUp = function moveUp() {\n        for(var i = 0; i < ROW_SIZE; i++){\n            var totalOne = squares[i].innerHTML;\n            var totalTwo = squares[i + BOARD_SIZE].innerHTML;\n            var totalThree = squares[i + BOARD_SIZE * 2].innerHTML;\n            var totalFour = squares[i + BOARD_SIZE * 3].innerHTML;\n            var column = [\n                parseInt(totalOne),\n                parseInt(totalTwo),\n                parseInt(totalThree),\n                parseInt(totalFour)\n            ];\n            var filteredColumn = column.filter(function(num) {\n                return num;\n            });\n            var missing = ROW_SIZE - filteredColumn.length;\n            var zeros = Array(missing).fill(0);\n            var newColumn = filteredColumn.concat(zeros);\n            squares[i].innerHTML = newColumn[0];\n            squares[i + BOARD_SIZE].innerHTML = newColumn[1];\n            squares[i + BOARD_SIZE * 2].innerHTML = newColumn[2];\n            squares[i + BOARD_SIZE * 3].innerHTML = newColumn[3];\n        }\n    };\n    var moveDown = function moveDown() {\n        for(var i = 0; i < ROW_SIZE; i++){\n            var totalOne = squares[i].innerHTML;\n            var totalTwo = squares[i + BOARD_SIZE].innerHTML;\n            var totalThree = squares[i + BOARD_SIZE * 2].innerHTML;\n            var totalFour = squares[i + BOARD_SIZE * 3].innerHTML;\n            var column = [\n                parseInt(totalOne),\n                parseInt(totalTwo),\n                parseInt(totalThree),\n                parseInt(totalFour)\n            ];\n            var filteredColumn = column.filter(function(num) {\n                return num;\n            });\n            var missing = 4 - filteredColumn.length;\n            var zeros = Array(missing).fill(0);\n            var newColumn = zeros.concat(filteredColumn);\n            squares[i].innerHTML = newColumn[0];\n            squares[i + BOARD_SIZE].innerHTML = newColumn[1];\n            squares[i + BOARD_SIZE * 2].innerHTML = newColumn[2];\n            squares[i + BOARD_SIZE * 3].innerHTML = newColumn[3];\n        }\n    };\n    var combineRow = function combineRow() {\n        for(var i = 0; i < BOARD_SIZE * ROW_SIZE - 1; i++)if (squares[i].innerHTML === squares[i + 1].innerHTML) {\n            var combinedTotal = parseInt(squares[i].innerHTML) + parseInt(squares[i + 1].innerHTML);\n            squares[i].innerHTML = combinedTotal;\n            squares[i + 1].innerHTML = \"0\";\n            score += combinedTotal;\n            scoreDisplay.innerHTML = score;\n        }\n        checkForWin();\n    };\n    var combineColumn = function combineColumn() {\n        for(var i = 0; i < BOARD_SIZE * (ROW_SIZE - 1); i++)if (squares[i].innerHTML === squares[i + BOARD_SIZE].innerHTML) {\n            var combinedTotal = parseInt(squares[i].innerHTML) + parseInt(squares[i + BOARD_SIZE].innerHTML);\n            squares[i].innerHTML = combinedTotal;\n            squares[i + BOARD_SIZE].innerHTML = \"0\";\n            score += combinedTotal;\n            scoreDisplay.innerHTML = score;\n        }\n        checkForWin();\n    };\n    var control = function control(e) {\n        switch(e.keyCode){\n            case 37:\n                keyLeft();\n                break;\n            case 38:\n                keyUp();\n                break;\n            case 39:\n                keyRight();\n                break;\n            case 40:\n                keyDown();\n                break;\n            default:\n                break;\n        }\n    };\n    var keyRight = function keyRight() {\n        var previousState = getGameState();\n        moveRight();\n        combineRow();\n        moveRight();\n        var currentState = getGameState();\n        if (!compareStates(previousState, currentState)) generate();\n    };\n    var keyLeft = function keyLeft() {\n        var previousState = getGameState();\n        moveLeft();\n        combineRow();\n        moveLeft();\n        var currentState = getGameState();\n        if (!compareStates(previousState, currentState)) generate();\n    };\n    var keyUp = function keyUp() {\n        var previousState = getGameState();\n        moveUp();\n        combineColumn();\n        moveUp();\n        var currentState = getGameState();\n        if (!compareStates(previousState, currentState)) generate();\n    };\n    var keyDown = function keyDown() {\n        var previousState = getGameState();\n        moveDown();\n        combineColumn();\n        moveDown();\n        var currentState = getGameState();\n        if (!compareStates(previousState, currentState)) generate();\n    };\n    var checkForWin = function checkForWin() {\n        for(var i = 0; i < squares.length; i++){\n            var value = parseInt(squares[i].innerHTML);\n            if (value >= 2048) {\n                resultDisplay.innerHTML = \"You WIN\";\n                document.removeEventListener(\"keyup\", control);\n                setTimeout(function() {\n                    return clear();\n                }, 3000);\n                break;\n            }\n        }\n    };\n    var checkForGameOver = function checkForGameOver() {\n        var zeros = 0;\n        for(var i = 0; i < squares.length; i++)if (squares[i].innerHTML === \"0\") zeros++;\n        if (zeros === 0 && !canMove()) {\n            resultDisplay.innerHTML = \"You LOSE, try again!\";\n            document.removeEventListener(\"keyup\", control);\n        }\n    };\n    var canMove = function canMove() {\n        for(var i = 0; i < squares.length; i++){\n            var currentSquare = squares[i].innerHTML;\n            var rightSquare = i % width < width - 1 ? squares[i + 1].innerHTML : null;\n            var leftSquare = i % width > 0 ? squares[i - 1].innerHTML : null;\n            var upSquare = i >= width ? squares[i - width].innerHTML : null;\n            var downSquare = i < width * (width - 1) ? squares[i + width].innerHTML : null;\n            if (currentSquare === rightSquare || currentSquare === leftSquare || currentSquare === upSquare || currentSquare === downSquare) return true;\n        }\n        return false;\n    };\n    var clear = function clear() {\n        clearInterval(myTimer);\n    };\n    var addColours = function addColours() {\n        for(var i = 0; i < squares.length; i++){\n            var value = squares[i].innerHTML;\n            squares[i].style.backgroundColor = value === \"0\" ? getColor(value) : getColor(value);\n            squares[i].style.color = value === \"0\" ? \"transparent\" : \"black\";\n        }\n    };\n    var getColor = function getColor(value) {\n        var colorMap = {\n            \"2\": \"#eee4da\",\n            \"4\": \"#ede0c8\",\n            \"8\": \"#f2b179\",\n            \"16\": \"#ffcea4\",\n            \"32\": \"#e8c064\",\n            \"64\": \"#ffab6e\",\n            \"128\": \"#fd9982\",\n            \"256\": \"#ead79c\",\n            \"512\": \"#76daff\",\n            \"1024\": \"#beeaa5\",\n            \"2048\": \"#d7d4f0\"\n        };\n        return colorMap[value] || \"#afa192\";\n    };\n    var getGameState = function getGameState() {\n        return squares.map(function(square) {\n            return square.innerHTML;\n        });\n    };\n    var compareStates = function compareStates(state1, state2) {\n        return state1.join() === state2.join();\n    };\n    var updateColors = function updateColors() {\n        addColours();\n        var currentState = getGameState();\n        var previousState = getGameState();\n        if (!compareStates(previousState, currentState)) setTimeout(function() {\n            generate();\n            addColours();\n        }, 200);\n    };\n    var gridDisplay = document.querySelector(\".grid\");\n    var scoreDisplay = document.getElementById(\"score\");\n    var resultDisplay = document.getElementById(\"result\");\n    var newGameButton = document.getElementById(\"new-game\");\n    var squares = [];\n    var width = 4;\n    var score = 0;\n    newGameButton.addEventListener(\"click\", handleNewGameClick);\n    createBoard();\n    var BOARD_SIZE = 4;\n    var ROW_SIZE = 4;\n    document.addEventListener(\"keyup\", control);\n    addColours();\n    document.addEventListener(\"keyup\", function() {\n        updateColors();\n    });\n    newGameButton.addEventListener(\"click\", function() {\n        updateColors();\n    });\n    updateColors();\n});\n\n//# sourceMappingURL=index.d2fa3b7d.js.map\n","'use strict';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const gridDisplay = document.querySelector('.grid');\n  const scoreDisplay = document.getElementById('score');\n  const resultDisplay = document.getElementById('result');\n  const newGameButton = document.getElementById('new-game');\n  const squares = [];\n  const width = 4;\n  let score = 0;\n\n  function resetGame() {\n    for (let i = 0; i < squares.length; i++) {\n      squares[i].innerHTML = 0;\n    }\n    score = 0;\n    scoreDisplay.innerHTML = score;\n    resultDisplay.innerHTML = 'Join the numbers and get to the <b>2048</b> tile!';\n    generate();\n    generate();\n  }\n\n  function clearStyles() {\n    for (let i = 0; i < squares.length; i++) {\n      squares[i].style.backgroundColor = '#afa192';\n    }\n  }\n\n  function handleNewGameClick() {\n    resetGame();\n    clearStyles();\n    addColours();\n    document.addEventListener('keyup', control);\n  }\n\n  newGameButton.addEventListener('click', handleNewGameClick);\n\n  function createBoard() {\n    for (let i = 0; i < width * width; i++) {\n      const square = document.createElement('div');\n\n      square.innerHTML = '0';\n      gridDisplay.appendChild(square);\n      squares.push(square);\n    }\n    generate();\n    generate();\n  }\n  createBoard();\n\n  function generate() {\n    const emptySquares = squares.filter(square => square.innerHTML === '0');\n\n    if (emptySquares.length === 0) {\n      checkForGameOver();\n      checkForWin();\n\n      return;\n    }\n\n    const randomIndex = Math.floor(Math.random() * emptySquares.length);\n    const newValue = Math.random() < 0.9 ? '2' : '4';\n\n    emptySquares[randomIndex].innerHTML = newValue;\n    checkForGameOver();\n  }\n\n  const BOARD_SIZE = 4;\n  const ROW_SIZE = 4;\n\n  function moveRight() {\n    for (let i = 0; i < BOARD_SIZE * ROW_SIZE; i++) {\n      if (i % 4 === 0) {\n        const totalOne = squares[i].innerHTML;\n        const totalTwo = squares[i + 1].innerHTML;\n        const totalThree = squares[i + 2].innerHTML;\n        const totalFour = squares[i + 3].innerHTML;\n        const row = [parseInt(totalOne), parseInt(totalTwo), parseInt(totalThree), parseInt(totalFour)];\n\n        const filteredRow = row.filter(num => num);\n        const missing = ROW_SIZE - filteredRow.length;\n        const zeros = Array(missing).fill(0);\n        const newRow = zeros.concat(filteredRow);\n\n        squares[i].innerHTML = newRow[0];\n        squares[i + 1].innerHTML = newRow[1];\n        squares[i + 2].innerHTML = newRow[2];\n        squares[i + 3].innerHTML = newRow[3];\n      }\n    }\n  }\n\n  function moveLeft() {\n    for (let i = 0; i < BOARD_SIZE * ROW_SIZE; i++) {\n      if (i % ROW_SIZE === 0) {\n        const totalOne = squares[i].innerHTML;\n        const totalTwo = squares[i + 1].innerHTML;\n        const totalThree = squares[i + 2].innerHTML;\n        const totalFour = squares[i + 3].innerHTML;\n        const row = [parseInt(totalOne), parseInt(totalTwo), parseInt(totalThree), parseInt(totalFour)];\n\n        const filteredRow = row.filter(num => num);\n        const missing = ROW_SIZE - filteredRow.length;\n\n        const zeros = Array(missing).fill(0);\n\n        const newRow = filteredRow.concat(zeros);\n\n        squares[i].innerHTML = newRow[0];\n        squares[i + 1].innerHTML = newRow[1];\n        squares[i + 2].innerHTML = newRow[2];\n        squares[i + 3].innerHTML = newRow[3];\n      }\n    }\n  }\n\n  function moveUp() {\n    for (let i = 0; i < ROW_SIZE; i++) {\n      const totalOne = squares[i].innerHTML;\n      const totalTwo = squares[i + BOARD_SIZE].innerHTML;\n      const totalThree = squares[i + (BOARD_SIZE * 2)].innerHTML;\n      const totalFour = squares[i + (BOARD_SIZE * 3)].innerHTML;\n      const column = [parseInt(totalOne), parseInt(totalTwo), parseInt(totalThree), parseInt(totalFour)];\n\n      const filteredColumn = column.filter(num => num);\n      const missing = ROW_SIZE - filteredColumn.length;\n      const zeros = Array(missing).fill(0);\n      const newColumn = filteredColumn.concat(zeros);\n\n      squares[i].innerHTML = newColumn[0];\n      squares[i + BOARD_SIZE].innerHTML = newColumn[1];\n      squares[i + (BOARD_SIZE * 2)].innerHTML = newColumn[2];\n      squares[i + (BOARD_SIZE * 3)].innerHTML = newColumn[3];\n    }\n  }\n\n  function moveDown() {\n    for (let i = 0; i < ROW_SIZE; i++) {\n      const totalOne = squares[i].innerHTML;\n      const totalTwo = squares[i + BOARD_SIZE].innerHTML;\n      const totalThree = squares[i + (BOARD_SIZE * 2)].innerHTML;\n      const totalFour = squares[i + (BOARD_SIZE * 3)].innerHTML;\n      const column = [parseInt(totalOne), parseInt(totalTwo), parseInt(totalThree), parseInt(totalFour)];\n\n      const filteredColumn = column.filter(num => num);\n      const missing = 4 - filteredColumn.length;\n      const zeros = Array(missing).fill(0);\n      const newColumn = zeros.concat(filteredColumn);\n\n      squares[i].innerHTML = newColumn[0];\n      squares[i + BOARD_SIZE].innerHTML = newColumn[1];\n      squares[i + (BOARD_SIZE * 2)].innerHTML = newColumn[2];\n      squares[i + (BOARD_SIZE * 3)].innerHTML = newColumn[3];\n    }\n  }\n\n  function combineRow() {\n    for (let i = 0; i < (BOARD_SIZE * ROW_SIZE) - 1; i++) {\n      if (squares[i].innerHTML === squares[i + 1].innerHTML) {\n        const combinedTotal = parseInt(squares[i].innerHTML) + parseInt(squares[i + 1].innerHTML);\n\n        squares[i].innerHTML = combinedTotal;\n        squares[i + 1].innerHTML = '0';\n        score += combinedTotal;\n        scoreDisplay.innerHTML = score;\n      }\n    }\n    checkForWin();\n  }\n\n  function combineColumn() {\n    for (let i = 0; i < BOARD_SIZE * (ROW_SIZE - 1); i++) {\n      if (squares[i].innerHTML === squares[i + BOARD_SIZE].innerHTML) {\n        const combinedTotal = parseInt(squares[i].innerHTML) + parseInt(squares[i + BOARD_SIZE].innerHTML);\n\n        squares[i].innerHTML = combinedTotal;\n        squares[i + BOARD_SIZE].innerHTML = '0';\n        score += combinedTotal;\n        scoreDisplay.innerHTML = score;\n      }\n    }\n    checkForWin();\n  }\n\n  function control(e) {\n    switch (e.keyCode) {\n      case 37:\n        keyLeft();\n        break;\n      case 38:\n        keyUp();\n        break;\n      case 39:\n        keyRight();\n        break;\n      case 40:\n        keyDown();\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  document.addEventListener('keyup', control);\n\n  function keyRight() {\n    const previousState = getGameState();\n\n    moveRight();\n    combineRow();\n    moveRight();\n\n    const currentState = getGameState();\n\n    if (!compareStates(previousState, currentState)) {\n      generate();\n    }\n  }\n\n  function keyLeft() {\n    const previousState = getGameState();\n\n    moveLeft();\n    combineRow();\n    moveLeft();\n\n    const currentState = getGameState();\n\n    if (!compareStates(previousState, currentState)) {\n      generate();\n    }\n  }\n\n  function keyUp() {\n    const previousState = getGameState();\n\n    moveUp();\n    combineColumn();\n    moveUp();\n\n    const currentState = getGameState();\n\n    if (!compareStates(previousState, currentState)) {\n      generate();\n    }\n  }\n\n  function keyDown() {\n    const previousState = getGameState();\n\n    moveDown();\n    combineColumn();\n    moveDown();\n\n    const currentState = getGameState();\n\n    if (!compareStates(previousState, currentState)) {\n      generate();\n    }\n  }\n\n  function checkForWin() {\n    for (let i = 0; i < squares.length; i++) {\n      const value = parseInt(squares[i].innerHTML);\n\n      if (value >= 2048) {\n        resultDisplay.innerHTML = 'You WIN';\n        document.removeEventListener('keyup', control);\n        setTimeout(() => clear(), 3000);\n        break;\n      }\n    }\n  }\n\n  function checkForGameOver() {\n    let zeros = 0;\n\n    for (let i = 0; i < squares.length; i++) {\n      if (squares[i].innerHTML === '0') {\n        zeros++;\n      }\n    }\n\n    if (zeros === 0 && !canMove()) {\n      resultDisplay.innerHTML = 'You LOSE, try again!';\n      document.removeEventListener('keyup', control);\n    }\n  }\n\n  function canMove() {\n    for (let i = 0; i < squares.length; i++) {\n      const currentSquare = squares[i].innerHTML;\n      const rightSquare = i % width < width - 1 ? squares[i + 1].innerHTML : null;\n      const leftSquare = i % width > 0 ? squares[i - 1].innerHTML : null;\n      const upSquare = i >= width ? squares[i - width].innerHTML : null;\n      const downSquare = i < width * (width - 1) ? squares[i + width].innerHTML : null;\n\n      if (\n        currentSquare === rightSquare\n        || currentSquare === leftSquare\n        || currentSquare === upSquare\n        || currentSquare === downSquare\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  function clear() {\n    clearInterval(myTimer);\n  }\n\n  function addColours() {\n    for (let i = 0; i < squares.length; i++) {\n      const value = squares[i].innerHTML;\n\n      squares[i].style.backgroundColor = value === '0' ? getColor(value) : getColor(value);\n      squares[i].style.color = value === '0' ? 'transparent' : 'black';\n    }\n  }\n\n  function getColor(value) {\n    const colorMap = {\n      '2': '#eee4da',\n      '4': '#ede0c8',\n      '8': '#f2b179',\n      '16': '#ffcea4',\n      '32': '#e8c064',\n      '64': '#ffab6e',\n      '128': '#fd9982',\n      '256': '#ead79c',\n      '512': '#76daff',\n      '1024': '#beeaa5',\n      '2048': '#d7d4f0',\n    };\n\n    return colorMap[value] || '#afa192';\n  }\n\n  function getGameState() {\n    return squares.map(square => square.innerHTML);\n  }\n\n  function compareStates(state1, state2) {\n    return state1.join() === state2.join();\n  }\n\n  addColours();\n\n  function updateColors() {\n    addColours();\n\n    const currentState = getGameState();\n    const previousState = getGameState();\n\n    if (!compareStates(previousState, currentState)) {\n      setTimeout(() => {\n        generate();\n        addColours();\n      }, 200);\n    }\n  }\n\n  document.addEventListener('keyup', () => {\n    updateColors();\n  });\n\n  newGameButton.addEventListener('click', () => {\n    updateColors();\n  });\n\n  updateColors();\n});\n"],"names":["document","addEventListener","resetGame","i","squares","length","innerHTML","score","scoreDisplay","resultDisplay","generate","clearStyles","style","backgroundColor","emptySquares","filter","square","checkForGameOver","checkForWin","randomIndex","Math","floor","random","moveRight","BOARD_SIZE","ROW_SIZE","totalOne","totalTwo","totalThree","totalFour","filteredRow","row","parseInt","num","newRow","zeros","Array","fill","concat","moveLeft","moveUp","filteredColumn","column","newColumn","moveDown","combineRow","combinedTotal","combineColumn","control","e","keyCode","keyLeft","keyUp","keyRight","keyDown","previousState","getGameState","compareStates","value","removeEventListener","setTimeout","clear","canMove","currentSquare","rightSquare","width","leftSquare","upSquare","downSquare","clearInterval","myTimer","addColours","getColor","color","colorMap","map","state1","state2","join","updateColors","currentState","gridDisplay","querySelector","getElementById","newGameButton","createBoard","createElement","appendChild","push"],"version":3,"file":"index.d2fa3b7d.js.map"}